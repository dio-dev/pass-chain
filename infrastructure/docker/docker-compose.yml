services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: passchain-postgres
    environment:
      POSTGRES_DB: passchain
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - passchain-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: passchain-redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - passchain-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # HashiCorp Vault
  vault:
    image: hashicorp/vault:latest
    container_name: passchain-vault
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: dev-only-token
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    networks:
      - passchain-network
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Backend API
  backend:
    build:
      context: ../../backend
      dockerfile: Dockerfile
    container_name: passchain-backend
    ports:
      - "8080:8080"
    environment:
      ENVIRONMENT: development
      PORT: 8080
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: passchain
      DB_SSL_MODE: disable
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: dev-only-token
      REDIS_ADDR: redis:6379
      JWT_SECRET: dev-secret-key
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      vault:
        condition: service_healthy
    networks:
      - passchain-network
    restart: unless-stopped

  # Frontend Web App
  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile
    container_name: passchain-frontend
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8080/api/v1
      NEXT_PUBLIC_WALLET_CONNECT_PROJECT_ID: demo-project-id
    depends_on:
      - backend
    networks:
      - passchain-network
    restart: unless-stopped

networks:
  passchain-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
